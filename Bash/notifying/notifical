#!/bin/bash

# Set up dunst or whatever notification daemon you use to more than 500px window width
# Thus, the calendar output doesn't misalign or inharmonious.

set -u
set -e

# Script variables
declare -r today=$(date "+%d/%m")
declare -a months days targetMonths targetDays
declare week output=""
declare dateRegex="([1-9]|0[1-9]|[1-2][0-9]|3[0-1])[\/](0[1-9]|[1-2][0-2]|[1-9])"

# User variables
declare monthRange="3"
declare calendar=$(cal 2022 -n $monthRange -m --color=never)
declare -a targetDates=()
declare -r defaultColor="red"
declare timeoutArg="20000"
declare inputFile=""


# Miscellanous variables
declare RED='\033[0;31m'
declare YEL='\033[0;33m'
declare NC='\033[0m'

declare usage="\
${RED}Usage${NC}:
  ./$(basename "$0") [option...] [dates...]

${RED}Options${NC}:
   -n, --months       Specifies how many months will be shown to a range of 1 to 3
   -t, --timeout      Specifies the timeout in milliseconds at which to expire the notification
   -i, --input-file   Specifies the input file with date patterns to be scrapped
   -l, --list-colors  Print list of available colors for highlighting"

declare datesExample="\
   Example: ./$(basename "$0") ${YEL}\"dd/mm color\"${NC}"

declare listColors="\
${RED}List of colors${NC}:
    black, white, gray, silver, lime
    red, purple, green, maroon, yellow
    olive, navy, blue, teal, aqua."

declare moreInfo="
Try \`$(basename "$0") -h\` for more information."

colorize() {
    parseTargetDay

    for ((i = 0; i < ${#months[@]}; i++)); do
	for ((j = 0; j < ${#targetDates[@]}; j++)); do
	    mon=$(printf "${months[$i]}" | awk '{print $1}')
	    if [[ "$mon" == "${targetMonths[j]}" ]]; then
		sedComm="s/\b${targetDays[j]}\b/<b><span color=\"${color[j]}\">${targetDays[j]}<\/span><\/b>/"
		days[$i]=$(printf "${days[$i]}" | sed "$sedComm")
	    fi
	done
    done
    
    unset targetDates targetMonths targetDays
}

parseTargetDay() {
    local formatDate temp targetDatesTemp 
    for (( i = 0; i < ${#targetDates[@]}; i++)); do
	local date=$(printf "${targetDates[$i]}" | awk '{print $1}')
	color[$i]=$(printf "${targetDates[$i]}" | awk '{print $2}')

	IFS='/' read -a temp <<< $date

	# Reverse array from mm/dd to dd/mm
	aux=${temp[0]#0}
	temp[0]=${temp[1]}
	temp[1]=$(printf "%02d" "$aux")
	targetDatesTemp[$i]=${temp[*]}
    done

    
    for (( i = 0; i < ${#targetDatesTemp[@]}; i++)); do
	formatDates+=($(printf "0000%s" "${targetDatesTemp[$i]}" | sed 's/ //g'))
    done

    # '00001115 = November 15 0000'
    for (( i = 0; i < ${#formatDates[@]}; i++)); do
	targetMonths[$i]=$(date -d "${formatDates[$i]}" '+%B %d' | awk '{print $1}')
	targetDays[$i]=$((10#$(printf "${targetDatesTemp[$i]}" | awk ' { print $2 } ') + 0))
    done

    unset temp
}

trimMonths() {
    months=$(
	printf "$1" | head -1 |
	    sed 's/^[[:space:]]*//' | rev | sed 's/   */,/2g' | rev
	  ) && IFS=',' read -a months <<<$months
}

trimWeek() {
    week=$(printf "$1" | sed -n "2p" | cut -c 1-20)
}

trimNdays() {
    local temp=$(printf "$1" | tail -n +3) range=22

    for i in $(seq 1 $((${#months[@]}))); do
	days[i - 1]=$(
	    printf "$temp" |
		awk -v i="$i" -v j="$range" '{ print substr($0, 1+j*(i-1), 21) }'
	    )
    done
}

formatCalendar() {
    trimMonths "$calendar"
    trimWeek "$calendar"
    trimNdays "$calendar"
}

formatOutput() {
    local lineCount=$(printf "${days[0]}" | wc -l | awk '{ print $1 }')
    local outputMonths outputMonth="" outputWeek="" outputDays=""
    local whitespaceSeparator="    "

    # Get boundaries into variable and print the first line MONTHS
    for (( i = 0; i < ${#months[@]}; i++)); do
	# Format month section
	local trailingWhitespace="" leadingWhitespace=""
	local monthLength=$(printf "${months[$i]}" | xargs) weekLength="${#week}"

	for (( j = 0; j < "${#monthLength}"/4+1; j++ )); do
	    trailingWhitespace="$trailingWhitespace "
	done

	monthLength="$trailingWhitespace$monthLength" && monthLength="${#monthLength}"
	local leadingWhitespaceLen=$(($weekLength - $monthLength))

	for (( j = 0; j < leadingWhitespaceLen; j++ )); do
	    leadingWhitespace="$leadingWhitespace "
	done

	outputMonth="$trailingWhitespace${months[$i]}$leadingWhitespace$whitespaceSeparator"
	outputMonths+=$(printf "$outputMonth")

	if (( $i == ${#months[@]}-1 )); then
	    local trail=${outputMonths##*[^[:blank:]]}
	    outputMonths="${outputMonths%${trail}}"
	fi

	# Format week section
	[ -z "$outputWeek" ] && outputWeek="$week" || outputWeek="$outputWeek$whitespaceSeparator$week"
    done

    # Format days section
    local daysLineCount=$(($(printf "${days[0]}" | wc -l)))
    for (( j = 1; j <= $daysLineCount; j++)); do
	for (( k = 0; k < ${#months[@]}; k++)); do
	    line=$(printf "${days[k]}" | sed -n "$j p")

	    # If days line has whitespaces leading and monthRange is greater than 1
	    # chop line by one to fix on format.
	    ! [[ "${line: -1}" == '>' ]] && (( "${#line}" > 20 )) && (( $monthRange > 1 )) &&line="${line::-1}"

	    if [ $((k+1)) == ${#months[@]} ]; then
		outputDays="$(printf "%s%s\n" "$outputDays" "$line")"
		continue
	    fi
	    outputDays="$(printf "%s%s%s\n" "$outputDays" "$line" "$whitespaceSeparator")"
	done
	outputDays="$outputDays\n"
    done
    output=$(printf "%s\n\n%s\n%s\n" "$outputMonths" "${outputWeek}" "${outputDays}")
}


parseMonthRange() {
    monthRange="$1"
    if ! [[ "$monthRange" =~ ^[0-9]+$ ]]; then
	argErr "x" "$monthRange"
    fi

    if [ "$monthRange" -lt 1 ] || [ "$monthRange" -gt 3 ]; then
	argErr "m" "$monthRange"
    fi

    calendar=$(cal 2022 -n $monthRange -m --color=never)
}

parseTimeout() {
    timeoutNumber="$1"
    if ! [[ "$timeoutNumber" =~ ^[0-9]+$ ]]; then
	argErr "z" "$timeoutNumber"
    fi
}

parseArgumentDate() {
    local argRegex="${dateRegex}( +[a-zA-Z]+) *"
    local oneWordRegex="(^ +[^ ]+$)|(^[^ ]+$)|(^[^ ]+ +$)|(^ +[^ ]+ +$)"

    local arg="$1"
    
    # If arg matches regex "mm/xx color"
    if [[ $arg =~ $argRegex ]]; then
	local argColor=$(printf "$arg" | awk '{ print $2 }')

	# Check if arg has a valid color
	if isColor "$argColor"; then
	    targetDates+=("$arg")
	else
	    argErr "c" "$argColor"
	fi

    elif [[ $arg =~ $oneWordRegex ]]; then
	# Check if arg has only 1 word
	argErr "c" "$arg"
    else
	argErr "a" "$arg"
    fi
}

parseInputFile() {
    local fileColor="$defaultColor";
    inputFile="$1"
    ! isFile "$1" && argErr "f" "$inputFile"

    if isSet "$2"; then
	if isColor "$2"; then
           fileColor="$2"  # || argErr "c" "$2"
	else
	   parseArgumentDate "$2"
	fi
    fi

    ! [[ -f $inputFile ]] && argErr "f" "$inputFile"

    local fileDates=$(cat $inputFile | grep -E -o --color=never "$dateRegex" | sed -e "s/$/ $fileColor/")

    
    readarray -t -O "${#targetDates[@]}" targetDates <<< "$fileDates"

    return 0
}

isSet() {
    ! [[ -z "$1" ]]
}

isColor() {
    matchColor=$(printf "$1" | xargs)

    declare -a availableColors=(
	black white gray silver maroon
	red purple fushsia green lime
	olive yellow navy blue teal aqua)

    for (( i = 0; i < ${#availableColors[@]}; i++ )); do
	[ "$matchColor" == "${availableColors[i]}" ] && return 0
    done

    return 1
}

isFile() {
    [[ -f "$1" ]]
}

argErr() {
    errCode="$1"
    errStr=$(printf "%s" "$2" | xargs)

    printf "${RED}ERROR${NC}: "

    case "$errCode" in
	u) printf "\`%s\` Unexpected argument\n"                      "$errStr"   ;;
	a) printf "\`%s\` Invalid date argument\n $datesExample\n"    "$errStr"   ;;
	c) printf "\`%s\` Is not a supported color\n $listColors\n\n" "$errStr"   ;;
	f) printf "\`%s\` Is not a valid file\n" "$errStr" && grep="--input-file" ;;
	x) printf "\`%s\` is not a number\n"     "$errStr" && grep="--months"     ;;
	z) printf "\`%s\` is not a number\n"     "$errStr" && grep="--timeout"    ;;
	m) printf "\`%s\` is not between 1-3\n"  "$errStr" && grep="--months"     ;;
	n) printf "Expected a range of months\n"           && grep="--months"     ;;
	i) printf "Expected input file\n"                  && grep="--input-file" ;;
	t) printf "Expected timeout argument\n"            && grep="--timeout"    ;;
    esac

    set +u
    isSet "grep" && printf "$usage" | grep -E "Usage|$grep" | awk '{print "   "$0}'
    set -u

    printf "%s\n" "$moreInfo"

    exit 1
}

# Format calendar style and trim each individual piece into separated variables
formatCalendar "$calendar"

# Parse arguments
set +u
while [[ "$#" -gt 0 ]]; do
    if isSet "$@"; then
	if [[ $1 == "-h" || $1 == "--help" ]]; then
	    printf "Notify calendar and day reminder\n\n$usage\n" && exit 0
	elif [[ $1 == "-n" || $1 == "--months" ]]; then
	    ! isSet "$2" && argErr "n" || parseMonthRange "$2" && shift

        # TODO: Fix timeout argument not working when inserted after another argument
	elif [[ $1 == "-t" || $1 == "--timeout" ]]; then
	    ! isSet "$2" && argErr "t" || parseTimeout "$2" && timeoutArg="$2" && shift

	elif [[ $1 == "-l" || $1 == "--list-colors" ]]; then
	    printf "%s\n" "$listColors" && exit 0

	elif [[ "$1" == "-i" || $1 == "--input-file" ]]; then
	    if isSet "$2"; then
                isFile "$2" || argErr "f" "$2"
		if isSet "$3"; then
		    parseInputFile "$2" "$3"
		    shift
		else
		    parseInputFile "$2"
		fi
	    else
		argErr "i" "$2"
	    fi
	    shift
	    
	elif [[ $1 =~ ${dateRegex} ]]; then
	    parseArgumentDate "$1"
	else
	    argErr "u" "$1"
	fi
    fi
    shift
done
set -u

# Format calendar
formatCalendar "$calendar"

# Colorize days in calendar
targetDates+=("$today yellow")

(( ${#targetDates[@]} )) && colorize

# Format output to notify-send
formatOutput "$output"

# To get to libnotify working on cron job xorg server we need to set these env variables up
DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send -t "$timeoutArg" "Notifical" "$output"

exit 0
